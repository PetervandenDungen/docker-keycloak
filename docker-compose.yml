version: '3.7'

services:
  webapp:
    build:
      context: .
      dockerfile: ./WebApplication1/Dockerfile
    image: webapp:latest
    ports:
      - "5001:5001"  # Map HTTP to 5001
      - "5002:5002"  # Map HTTPS to 5002
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:5001;https://*:5002  # Set correct URLs
    depends_on:
      - mssql
      - mssql_databases_init
      - keycloak

  mssql:
    container_name: mssql
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_PID=${MSSQL_PID}
      - MSSQL_DATABASE=${MSSQL_DATABASE}
      - MSSQL_USER=${MSSQL_USER}
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
    volumes:
      - mssql_data:/var/opt/mssqlwebapplication1
    ports:
      - "1433:1433"  # Expose MSSQL to the host on port 1433

  mssql_databases_init:
    container_name: mssql_webapp_init
    image: mcr.microsoft.com/mssql/server:2022-latest
    volumes:
      - ./docker/init/mssql:/docker-entrypoint-initdb.d 
    depends_on:
      - mssql
    command: >
        bash -c '
          echo "Starting the mssql server instance... Please hold tight!";

          # Wait for SQL Server to be available
          for i in {1..60}; do
            /opt/mssql-tools18/bin/sqlcmd -S mssql -U ${MSSQL_USER} -P "${MSSQL_SA_PASSWORD}" -Q "SELECT 1" -N o -C && break || sleep 2;
            
            echo "Waiting a few seconds in order to start the mssql server instance.";
          done;

          # Run initialization scripts with variables
          /opt/mssql-tools18/bin/sqlcmd -S mssql -U ${MSSQL_USER} -P "${MSSQL_SA_PASSWORD}" -d master \
            -v WA_DB_NAME=${WA_DB_NAME} WA_DB_USERNAME=${WA_DB_USERNAME} WA_DB_PASSWORD=${WA_DB_PASSWORD} \
            -i /docker-entrypoint-initdb.d/webapp_db_init.sql -N o;

          /opt/mssql-tools18/bin/sqlcmd -S mssql -U ${MSSQL_USER} -P "${MSSQL_SA_PASSWORD}" -d master \
            -v KC_DB_NAME=${KC_DB_NAME} KC_DB_USERNAME=${KC_DB_USERNAME} KC_DB_PASSWORD=${KC_DB_PASSWORD} \
            -i /docker-entrypoint-initdb.d/keycloak_db_init.sql -N o;

          # Finalize with success message
          echo "Databases created";'

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: start-dev
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080 
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: mssql
      KC_DB_URL: jdbc:sqlserver://mssql:1433;databaseName=${KC_DB_NAME};encrypt=false
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
    ports:
      - 8080:8080 
    restart: always
    depends_on:
      - mssql
      - mssql_databases_init  

volumes:
  mssql_data:
    driver: local

networks:
  webapplication1-nw:
    driver: bridge
